name: deploy to production (ecr/app runner ou elastic beanstalk)

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'confirmar deploy para produ√ß√£o?'
        required: true
        default: 'sim'
        type: choice
        options:
          - sim
          - n√£o

jobs:
  deploy:
    name: build e deploy
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm == 'sim'

    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: login to amazon ecr (para fluxo ecr/app runner)
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: build, tag e push da imagem docker (apenas se usar ecr/app runner)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          if [ -n "$ECR_REPOSITORY" ]; then \
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . && \
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest && \
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG && \
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest && \
            echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT ; \
          else \
            echo "pulando build docker (fluxo elastic beanstalk)" ; \
          fi

      - name: deploy no app runner (se APP_RUNNER_SERVICE_ARN definido)
        run: |
          if [ -n "${{ secrets.APP_RUNNER_SERVICE_ARN }}" ]; then \
            aws apprunner start-deployment --service-arn ${{ secrets.APP_RUNNER_SERVICE_ARN }} ; \
          else \
            echo "APP_RUNNER_SERVICE_ARN n√£o definido, pulando" ; \
          fi

      - name: deploy no elastic beanstalk (zip upload)
        env:
          EB_APP_NAME: ${{ secrets.EB_APP_NAME }}
          EB_ENV_NAME: ${{ secrets.EB_ENV_NAME }}
          EB_S3_BUCKET: ${{ secrets.EB_S3_BUCKET }}
        run: |
          if [ -n "$EB_APP_NAME" ] && [ -n "$EB_ENV_NAME" ] && [ -n "$EB_S3_BUCKET" ]; then \
            zip -r release.zip . -x "node_modules/*" "dist/*" ".git/*" ".github/*" "coverage/*" && \
            aws s3 cp release.zip s3://$EB_S3_BUCKET/releases/${GITHUB_SHA}.zip && \
            aws elasticbeanstalk create-application-version --application-name "$EB_APP_NAME" \
              --version-label ${GITHUB_SHA} --source-bundle S3Bucket=$EB_S3_BUCKET,S3Key=releases/${GITHUB_SHA}.zip && \
            aws elasticbeanstalk update-environment --environment-name "$EB_ENV_NAME" \
              --version-label ${GITHUB_SHA} ; \
          else \
            echo "vari√°veis do elastic beanstalk n√£o definidas, pulando" ; \
          fi

      - name: notificar sucesso
        if: success()
        run: |
          echo "‚úÖ deploy realizado com sucesso!"
          echo "üì¶ imagem: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.sha }}"
          echo "üöÄ app runner est√° fazendo o deploy..."

      - name: notificar falha
        if: failure()
        run: |
          echo "‚ùå falha no deploy"
          exit 1

